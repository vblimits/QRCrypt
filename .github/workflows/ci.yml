name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libfontconfig1-dev libfreetype6-dev libopencv-dev libclang-dev llvm-dev

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        choco install ninja llvm -y
        git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
        C:/vcpkg/bootstrap-vcpkg.bat
        C:/vcpkg/vcpkg.exe install opencv --triplet x64-windows

    - name: Set environment variables (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        echo "VCPKG_ROOT=C:/vcpkg" >> $env:GITHUB_ENV
        echo "VCPKGRS_DYNAMIC=1" >> $env:GITHUB_ENV
        echo "OpenCV_DIR=C:/vcpkg/installed/x64-windows/share/opencv" >> $env:GITHUB_ENV
        echo "OPENCV_INSTALL=1" >> $env:GITHUB_ENV
        echo "LIBCLANG_PATH=C:/Program Files/LLVM/bin" >> $env:GITHUB_ENV
        echo "PATH=C:/Program Files/LLVM/bin;$env:PATH" >> $env:GITHUB_ENV

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install opencv llvm

    - name: Set macOS environment variables
      if: matrix.os == 'macos-latest'
      run: |
        echo "LLVM_CONFIG_PATH=$(brew --prefix llvm)/bin/llvm-config" >> $GITHUB_ENV
        echo "LIBCLANG_PATH=$(brew --prefix llvm)/lib" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=$(brew --prefix opencv)/lib/pkgconfig:$(brew --prefix)/lib/pkgconfig" >> $GITHUB_ENV

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache target directory
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache OpenCV build
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry/src/**/opencv-*
        key: ${{ runner.os }}-opencv-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --verbose

    - name: Check formatting
      run: cargo fmt --all -- --check
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libfontconfig1-dev libfreetype6-dev libopencv-dev libclang-dev llvm-dev

    - name: Check build
      run: cargo build --verbose

    - name: Check release build
      run: cargo build --release --verbose

    - name: Check camera feature build
      run: cargo build --release --features camera --verbose

  auto-release:
    name: Auto Release
    runs-on: ubuntu-latest
    needs: [test, security, build-check, build-cross-platform]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libfontconfig1-dev libfreetype6-dev libopencv-dev libclang-dev llvm-dev

    - name: Get current version and auto-increment patch
      id: version
      run: |
        CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
        echo "Current version: $CURRENT_VERSION"
        
        # Split version into parts
        IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
        NEW_PATCH=$((patch + 1))
        NEW_VERSION="${major}.${minor}.${NEW_PATCH}"
        
        echo "New version: $NEW_VERSION"
        echo "VERSION=v$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "CURRENT_VERSION=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "NEW_VERSION_NUM=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Check if current version tag exists
      id: tag_check
      run: |
        if git rev-parse ${{ steps.version.outputs.CURRENT_VERSION }} >/dev/null 2>&1; then
          echo "CURRENT_TAG_EXISTS=true" >> $GITHUB_OUTPUT
          echo "Current version tag already exists, will create release with incremented version"
        else
          echo "CURRENT_TAG_EXISTS=false" >> $GITHUB_OUTPUT
          echo "Current version tag does not exist, will create release without incrementing"
        fi
        
        if git rev-parse ${{ steps.version.outputs.VERSION }} >/dev/null 2>&1; then
          echo "NEW_TAG_EXISTS=true" >> $GITHUB_OUTPUT
        else
          echo "NEW_TAG_EXISTS=false" >> $GITHUB_OUTPUT
        fi

    - name: Update version in Cargo.toml
      if: steps.tag_check.outputs.NEW_TAG_EXISTS == 'false'
      run: |
        if [[ "${{ steps.tag_check.outputs.CURRENT_TAG_EXISTS }}" == "true" ]]; then
          # Increment version
          sed -i 's/^version = ".*"/version = "${{ steps.version.outputs.NEW_VERSION_NUM }}"/' Cargo.toml
          echo "Updated version to ${{ steps.version.outputs.NEW_VERSION_NUM }}"
        else
          # Use current version
          echo "Using current version ${{ steps.version.outputs.CURRENT_VERSION }}"
        fi

    - name: Commit version bump and create tag
      if: steps.tag_check.outputs.NEW_TAG_EXISTS == 'false'
      run: |
        # Determine which version to use for tagging
        if [[ "${{ steps.tag_check.outputs.CURRENT_TAG_EXISTS }}" == "true" ]]; then
          # Use incremented version
          VERSION_TO_TAG="${{ steps.version.outputs.NEW_VERSION_NUM }}"
          TAG_TO_CREATE="${{ steps.version.outputs.VERSION }}"
          git add Cargo.toml
          git commit -m "🤖 Auto-bump version to ${VERSION_TO_TAG}"
        else
          # Use current version
          VERSION_TO_TAG=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          TAG_TO_CREATE="v${VERSION_TO_TAG}"
        fi
        
        echo "Creating tag: ${TAG_TO_CREATE}"
        git tag -a "${TAG_TO_CREATE}" -m "🤖 Auto-release ${TAG_TO_CREATE} - All tests passed"
        git push origin main --tags

  build-cross-platform:
    name: Build Cross-Platform Binaries
    runs-on: ${{ matrix.os }}
    needs: [test, security, build-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: qrcrypt-linux-x86_64
            asset_name: qrcrypt-linux-x86_64.tar.gz
            deps: sudo apt-get update && sudo apt-get install -y libfontconfig1-dev libfreetype6-dev libopencv-dev libclang-dev llvm-dev
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: qrcrypt-windows-x86_64.exe
            asset_name: qrcrypt-windows-x86_64.zip
          - os: macos-latest
            target: x86_64-apple-darwin
            name: qrcrypt-macos-x86_64
            asset_name: qrcrypt-macos-x86_64.tar.gz
            deps: brew install opencv llvm
          - os: macos-latest
            target: aarch64-apple-darwin
            name: qrcrypt-macos-aarch64
            asset_name: qrcrypt-macos-aarch64.tar.gz
            deps: brew install opencv llvm

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache target directory
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache OpenCV build
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry/src/**/opencv-*
        key: ${{ runner.os }}-${{ matrix.target }}-opencv-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies (Unix)
      if: matrix.deps != '' && matrix.os != 'windows-latest'
      run: ${{ matrix.deps }}

    - name: Install OpenCV with vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        if (-not (Test-Path "C:/vcpkg")) {
          git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
          C:/vcpkg/bootstrap-vcpkg.bat
        }
        C:/vcpkg/vcpkg.exe install opencv --triplet x64-windows
        choco install llvm -y --force

    - name: Set Windows environment variables
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        echo "VCPKG_ROOT=C:/vcpkg" >> $env:GITHUB_ENV
        echo "VCPKGRS_DYNAMIC=1" >> $env:GITHUB_ENV
        echo "OpenCV_DIR=C:/vcpkg/installed/x64-windows/share/opencv" >> $env:GITHUB_ENV
        echo "OPENCV_INSTALL=1" >> $env:GITHUB_ENV
        echo "LIBCLANG_PATH=C:/Program Files/LLVM/bin" >> $env:GITHUB_ENV
        echo "PATH=C:/Program Files/LLVM/bin;$env:PATH" >> $env:GITHUB_ENV

    - name: Set macOS environment variables
      if: matrix.os == 'macos-latest'
      run: |
        echo "LLVM_CONFIG_PATH=$(brew --prefix llvm)/bin/llvm-config" >> $GITHUB_ENV
        echo "LIBCLANG_PATH=$(brew --prefix llvm)/lib" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=$(brew --prefix opencv)/lib/pkgconfig:$(brew --prefix)/lib/pkgconfig" >> $GITHUB_ENV

    - name: Build release binary with camera support
      run: cargo build --release --features camera --target ${{ matrix.target }}
      env:
        VCPKG_ROOT: ${{ matrix.os == 'windows-latest' && 'C:/vcpkg' || '' }}
        OpenCV_DIR: ${{ matrix.os == 'windows-latest' && 'C:/vcpkg/installed/x64-windows/share/opencv' || '' }}

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        if command -v strip >/dev/null 2>&1; then
          strip target/${{ matrix.target }}/release/qrcrypt
        fi

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ../../../${{ matrix.asset_name }} qrcrypt
        cd ../../..

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.asset_name }} qrcrypt.exe
        cd ../../..

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}

  generate-release:
    name: Generate Release
    runs-on: ubuntu-latest 
    needs: [auto-release, build-cross-platform]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get version info
      id: version
      run: |
        CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
        echo "VERSION=v$CURRENT_VERSION" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure
      run: ls -la artifacts/

    - name: Generate changelog
      id: changelog
      run: |
        cat > RELEASE_NOTES.md << 'EOF'
        ## QRCrypt ${{ steps.version.outputs.VERSION }}
        
        🔐 Secure storage of crypto wallet seed phrases in encrypted QR codes with Shamir's Secret Sharing.
        
        ### ✨ Features
        - **AES-256-GCM encryption** with Argon2 key derivation
        - **Shamir's Secret Sharing** for distributed backups (secure vsss-rs implementation)
        - **High-quality QR code generation** optimized for scanning
        - **Stainless steel card generation** for laser engraving
        - **BIP39 mnemonic validation** with comprehensive word checking
        - **Plausible deniability** with layered encryption
        - **Cross-platform support** (Linux, macOS, Windows)
        
        ### 🛡️ Security
        - All dependencies updated to latest secure versions
        - Migrated from vulnerable `sharks` to secure `vsss-rs`
        - Comprehensive security auditing in CI/CD pipeline
        
        ### 📦 Installation
        
        **Linux:**
        ```bash
        curl -L https://github.com/vblimits/QRCrypt/releases/download/${{ steps.version.outputs.VERSION }}/qrcrypt-linux-x86_64.tar.gz | tar -xz
        sudo mv qrcrypt-linux-x86_64 /usr/local/bin/qrcrypt
        chmod +x /usr/local/bin/qrcrypt
        ```
        
        **Windows:**
        ```powershell
        Invoke-WebRequest -Uri "https://github.com/vblimits/QRCrypt/releases/download/${{ steps.version.outputs.VERSION }}/qrcrypt-windows-x86_64.zip" -OutFile "qrcrypt.zip"
        Expand-Archive -Path "qrcrypt.zip" -DestinationPath "."
        # Add qrcrypt-windows-x86_64.exe to your PATH
        ```
        
        **macOS (Intel):**
        ```bash
        curl -L https://github.com/vbllimits/QRCrypt/releases/download/${{ steps.version.outputs.VERSION }}/qrcrypt-macos-x86_64.tar.gz | tar -xz
        sudo mv qrcrypt-macos-x86_64 /usr/local/bin/qrcrypt
        chmod +x /usr/local/bin/qrcrypt
        ```
        
        **macOS (Apple Silicon):**
        ```bash
        curl -L https://github.com/vblimits/QRCrypt/releases/download/${{ steps.version.outputs.VERSION }}/qrcrypt-macos-aarch64.tar.gz | tar -xz
        sudo mv qrcrypt-macos-aarch64 /usr/local/bin/qrcrypt
        chmod +x /usr/local/bin/qrcrypt
        ```
        
        ### 🚀 Quick Start
        
        **Encrypt a seed phrase:**
        ```bash
        echo "your seed phrase here" | qrcrypt encrypt --output backup.png
        ```
        
        **Split into Shamir shares:**
        ```bash
        qrcrypt split --threshold 3 --total 5 --output-dir ./shares/ --prefix backup
        ```
        
        **Generate laser-ready cards:**
        ```bash
        qrcrypt split --threshold 2 --total 3 --card --output-dir ./cards/ --prefix wallet
        ```
        
        **Validate seed phrases:**
        ```bash
        echo "abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about" | qrcrypt validate-phrase
        ```
        
        ### 📚 Documentation
        - [README](https://github.com/vblimits/QRCrypt/blob/main/README.md)
        - [Security Guide](https://github.com/vblimits/QRCrypt/blob/main/docs/SECURITY.md)
        
        ---
        🤖 *This release was automatically created when CI/CD tests passed on the main branch.*
        EOF

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: QRCrypt ${{ steps.version.outputs.VERSION }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
        files: |
          artifacts/qrcrypt-linux-x86_64.tar.gz
          artifacts/qrcrypt-windows-x86_64.zip
          artifacts/qrcrypt-macos-x86_64.tar.gz
          artifacts/qrcrypt-macos-aarch64.tar.gz
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}