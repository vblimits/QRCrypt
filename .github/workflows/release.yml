# Manual Cross-Platform Release Workflow
# Auto-releases with auto-tagging happen in ci.yml when tests pass on main branch
# This workflow is for creating comprehensive cross-platform releases manually
name: Manual Cross-Platform Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.96.1)'
        required: true
        default: 'v0.96.1'
      create_tag:
        description: 'Create the tag if it does not exist'
        required: false
        default: 'false'
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build release binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: qrcrypt-linux-x86_64
            asset_name: qrcrypt-linux-x86_64.tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            name: qrcrypt-linux-x86_64-musl
            asset_name: qrcrypt-linux-x86_64-musl.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: qrcrypt-windows-x86_64.exe
            asset_name: qrcrypt-windows-x86_64.zip
          - os: macos-latest
            target: x86_64-apple-darwin
            name: qrcrypt-macos-x86_64
            asset_name: qrcrypt-macos-x86_64.tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            name: qrcrypt-macos-aarch64
            asset_name: qrcrypt-macos-aarch64.tar.gz

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libfontconfig1-dev libfreetype6-dev
        # Install musl tools if needed
        if [[ "${{ matrix.target }}" == *"musl"* ]]; then
          sudo apt-get install -y musl-tools
        fi

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache target directory
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-${{ matrix.target }}-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        if command -v strip >/dev/null 2>&1; then
          strip target/${{ matrix.target }}/release/qrcrypt
        fi

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ../../../${{ matrix.asset_name }} qrcrypt
        cd ../../..

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.asset_name }} qrcrypt.exe
        cd ../../..

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Create tag if requested
      if: inputs.create_tag == 'true'
      run: |
        echo "Creating tag ${{ inputs.tag }}"
        git tag -a "${{ inputs.tag }}" -m "🏷️ Manual cross-platform release ${{ inputs.tag }}"
        git push origin "${{ inputs.tag }}"

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure
      run: ls -la artifacts/

    - name: Get tag name
      id: tag_name
      run: |
        echo "TAG_NAME=${{ inputs.tag }}" >> $GITHUB_OUTPUT

    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        ## QRCrypt ${{ steps.tag_name.outputs.TAG_NAME }}
        
        Secure storage of crypto wallet seed phrases in encrypted QR codes with Shamir's Secret Sharing.
        
        ### Features
        - 🔐 AES-256-GCM encryption with Argon2 key derivation
        - 🧩 Shamir's Secret Sharing for distributed backups
        - 📱 High-quality QR code generation
        - 🃏 Stainless steel card generation for laser engraving
        - 🔍 BIP39 mnemonic phrase validation
        - 🛡️ Plausible deniability support
        
        ### Downloads
        Choose the appropriate binary for your system:
        
        - **Linux (x86_64)**: `qrcrypt-linux-x86_64.tar.gz`
        - **Linux (musl)**: `qrcrypt-linux-x86_64-musl.tar.gz` (static binary)
        - **Windows (x86_64)**: `qrcrypt-windows-x86_64.zip`
        - **macOS (Intel)**: `qrcrypt-macos-x86_64.tar.gz`
        - **macOS (Apple Silicon)**: `qrcrypt-macos-aarch64.tar.gz`
        
        ### Installation
        1. Download the appropriate archive for your system
        2. Extract the binary
        3. (Optional) Move to a directory in your PATH
        
        ### Usage
        ```bash
        # Encrypt a seed phrase
        echo "your seed phrase here" | qrcrypt encrypt --output backup.png
        
        # Split into Shamir shares
        qrcrypt split --threshold 3 --total 5 --output-dir ./shares/ --prefix backup
        
        # Generate laser-ready cards
        qrcrypt split --threshold 2 --total 3 --card --output-dir ./cards/ --prefix wallet
        ```
        
        For detailed documentation, see the [README](https://github.com/vblimits/QRCrypt/blob/main/README.md).
        EOF
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        cat release_notes.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag_name.outputs.TAG_NAME }}
        name: QRCrypt ${{ steps.tag_name.outputs.TAG_NAME }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        draft: false
        prerelease: false
        files: |
          artifacts/qrcrypt-linux-x86_64.tar.gz/qrcrypt-linux-x86_64.tar.gz
          artifacts/qrcrypt-linux-x86_64-musl.tar.gz/qrcrypt-linux-x86_64-musl.tar.gz
          artifacts/qrcrypt-windows-x86_64.zip/qrcrypt-windows-x86_64.zip
          artifacts/qrcrypt-macos-x86_64.tar.gz/qrcrypt-macos-x86_64.tar.gz
          artifacts/qrcrypt-macos-aarch64.tar.gz/qrcrypt-macos-aarch64.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}