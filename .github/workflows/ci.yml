name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libfontconfig1-dev libfreetype6-dev

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache target directory
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --verbose

    - name: Check formatting
      run: cargo fmt --all -- --check
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  build-check:
    name: Build Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libfontconfig1-dev libfreetype6-dev

    - name: Check build
      run: cargo build --verbose

    - name: Check release build
      run: cargo build --release --verbose

  auto-release:
    name: Auto Release
    runs-on: ubuntu-latest
    needs: [test, security, build-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libfontconfig1-dev libfreetype6-dev

    - name: Get current version and auto-increment patch
      id: version
      run: |
        CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
        echo "Current version: $CURRENT_VERSION"
        
        # Split version into parts
        IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
        NEW_PATCH=$((patch + 1))
        NEW_VERSION="${major}.${minor}.${NEW_PATCH}"
        
        echo "New version: $NEW_VERSION"
        echo "VERSION=v$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "CURRENT_VERSION=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "NEW_VERSION_NUM=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Check if current version tag exists
      id: tag_check
      run: |
        if git rev-parse ${{ steps.version.outputs.CURRENT_VERSION }} >/dev/null 2>&1; then
          echo "CURRENT_TAG_EXISTS=true" >> $GITHUB_OUTPUT
          echo "Current version tag already exists, will create release with incremented version"
        else
          echo "CURRENT_TAG_EXISTS=false" >> $GITHUB_OUTPUT
          echo "Current version tag does not exist, will create release without incrementing"
        fi
        
        if git rev-parse ${{ steps.version.outputs.VERSION }} >/dev/null 2>&1; then
          echo "NEW_TAG_EXISTS=true" >> $GITHUB_OUTPUT
        else
          echo "NEW_TAG_EXISTS=false" >> $GITHUB_OUTPUT
        fi

    - name: Update version in Cargo.toml
      if: steps.tag_check.outputs.NEW_TAG_EXISTS == 'false'
      run: |
        if [[ "${{ steps.tag_check.outputs.CURRENT_TAG_EXISTS }}" == "true" ]]; then
          # Increment version
          sed -i 's/^version = ".*"/version = "${{ steps.version.outputs.NEW_VERSION_NUM }}"/' Cargo.toml
          echo "Updated version to ${{ steps.version.outputs.NEW_VERSION_NUM }}"
        else
          # Use current version
          echo "Using current version ${{ steps.version.outputs.CURRENT_VERSION }}"
        fi

    - name: Commit version bump and create tag
      if: steps.tag_check.outputs.NEW_TAG_EXISTS == 'false'
      run: |
        # Determine which version to use for tagging
        if [[ "${{ steps.tag_check.outputs.CURRENT_TAG_EXISTS }}" == "true" ]]; then
          # Use incremented version
          VERSION_TO_TAG="${{ steps.version.outputs.NEW_VERSION_NUM }}"
          TAG_TO_CREATE="${{ steps.version.outputs.VERSION }}"
          git add Cargo.toml
          git commit -m "🤖 Auto-bump version to ${VERSION_TO_TAG}"
        else
          # Use current version
          VERSION_TO_TAG=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          TAG_TO_CREATE="v${VERSION_TO_TAG}"
        fi
        
        echo "Creating tag: ${TAG_TO_CREATE}"
        git tag -a "${TAG_TO_CREATE}" -m "🤖 Auto-release ${TAG_TO_CREATE} - All tests passed"
        git push origin main --tags

    - name: Build release binaries
      if: steps.tag_check.outputs.NEW_TAG_EXISTS == 'false'
      run: |
        # Build for multiple targets
        rustup target add x86_64-unknown-linux-musl
        sudo apt-get install -y musl-tools
        
        # Build Linux static binary
        cargo build --release --target x86_64-unknown-linux-musl
        
        # Build regular Linux binary
        cargo build --release --target x86_64-unknown-linux-gnu
        
        # Create release directory
        mkdir -p release
        
        # Copy and compress binaries
        cp target/x86_64-unknown-linux-gnu/release/qrcrypt release/qrcrypt-linux-x86_64
        cp target/x86_64-unknown-linux-musl/release/qrcrypt release/qrcrypt-linux-x86_64-static
        
        # Create archives
        cd release
        tar -czf qrcrypt-linux-x86_64.tar.gz qrcrypt-linux-x86_64
        tar -czf qrcrypt-linux-x86_64-static.tar.gz qrcrypt-linux-x86_64-static

    - name: Generate changelog
      id: changelog
      if: steps.tag_check.outputs.NEW_TAG_EXISTS == 'false'
      run: |
        cat > RELEASE_NOTES.md << 'EOF'
        ## QRCrypt ${{ steps.version.outputs.VERSION }}
        
        🔐 Secure storage of crypto wallet seed phrases in encrypted QR codes with Shamir's Secret Sharing.
        
        ### ✨ Features
        - **AES-256-GCM encryption** with Argon2 key derivation
        - **Shamir's Secret Sharing** for distributed backups (secure vsss-rs implementation)
        - **High-quality QR code generation** optimized for scanning
        - **Stainless steel card generation** for laser engraving
        - **BIP39 mnemonic validation** with comprehensive word checking
        - **Plausible deniability** with layered encryption
        - **Cross-platform support** (Linux, macOS, Windows)
        
        ### 🛡️ Security
        - All dependencies updated to latest secure versions
        - Migrated from vulnerable `sharks` to secure `vsss-rs`
        - Comprehensive security auditing in CI/CD pipeline
        
        ### 📦 Installation
        
        **Linux (recommended - static binary):**
        ```bash
        curl -L https://github.com/vblimits/QRCrypt/releases/download/${{ steps.version.outputs.VERSION }}/qrcrypt-linux-x86_64-static.tar.gz | tar -xz
        sudo mv qrcrypt-linux-x86_64-static /usr/local/bin/qrcrypt
        chmod +x /usr/local/bin/qrcrypt
        ```
        
        **Linux (dynamic binary):**
        ```bash
        curl -L https://github.com/vblimits/QRCrypt/releases/download/${{ steps.version.outputs.VERSION }}/qrcrypt-linux-x86_64.tar.gz | tar -xz
        sudo mv qrcrypt-linux-x86_64 /usr/local/bin/qrcrypt
        chmod +x /usr/local/bin/qrcrypt
        ```
        
        ### 🚀 Quick Start
        
        **Encrypt a seed phrase:**
        ```bash
        echo "your seed phrase here" | qrcrypt encrypt --output backup.png
        ```
        
        **Split into Shamir shares:**
        ```bash
        qrcrypt split --threshold 3 --total 5 --output-dir ./shares/ --prefix backup
        ```
        
        **Generate laser-ready cards:**
        ```bash
        qrcrypt split --threshold 2 --total 3 --card --output-dir ./cards/ --prefix wallet
        ```
        
        **Validate seed phrases:**
        ```bash
        echo "abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about" | qrcrypt validate-phrase
        ```
        
        ### 📚 Documentation
        - [README](https://github.com/vblimits/QRCrypt/blob/main/README.md)
        - [Security Guide](https://github.com/vblimits/QRCrypt/blob/main/docs/SECURITY.md)
        
        ---
        🤖 *This release was automatically created when CI/CD tests passed on the main branch.*
        EOF

    - name: Create release
      if: steps.tag_check.outputs.NEW_TAG_EXISTS == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: QRCrypt ${{ steps.version.outputs.VERSION }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false
        files: |
          release/qrcrypt-linux-x86_64.tar.gz
          release/qrcrypt-linux-x86_64-static.tar.gz
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}